!function(e){window.HockeyDataConfig=function(){return{logoBaseUrl:"/wp-content/themes/hsc-theme/images/teams",hockeyDataApiUrl:"http://api.hockeydata.net/data/ebel",league:"ebel",sport:"icehockey",referer:"www.h-sc.at",hockeyDataApiKey:"e52b5722cbc89c3e51ee0cd6e2485a81"}}}(jQuery),function(e){"use strict";var a=jQuery.fn.addClass;jQuery.fn.addClass=function(){var e=a.apply(this,arguments);return jQuery("#main-header").removeClass("et-fixed-header"),e},e("#main-header").removeClass("et-fixed-header")}(jQuery),function(e){"use strict";function a(){var a=new HockeyDataConfig,t="136",n=[4951,4952],s="halbfinale",i=function(e){var t='<table class="hsc-knockout-overview"><tr>  <td class="image">';return t+=_.contains(n,e.teams[0].id)?"<strong>{{ teams[0].longname }}</strong>":'<img src="'+a.logoBaseUrl+'/{{ teams[0].id }}.png"/>',t+='  </td>  <td class="meta">    <span class="score">{{ teams[0].gamesWon }} : {{ teams[1].gamesWon }}</span><br/>    <span class="bestof">Best of: {{ bestOf }}</span>  </td>  <td class="image">',t+=_.contains(n,e.teams[1].id)?"<strong>{{ teams[1].longname }}</strong>":'<img src="'+a.logoBaseUrl+'/{{ teams[1].id }}.png"/>',t+="  </td></tr></table>",(t=_.template(t))(e)},d=function(e){var a='<tr>  <td class="date" colspan="2">    {{ scheduledDate.value }} - {{ scheduledTime }}  </td></tr><tr>  <td class="team">{{ homeTeamLongName }} <br/> {{ awayTeamLongName }}</td>  <td class="score">      {{ gameStatus > 0 ? homeTeamScore : "-" }}      : {{ gameStatus > 0 ? awayTeamScore : "-" }}  </td></tr>';return(a=_.template(a))(e)},o=function(a,t){var n='<div class="hsc-knockout">',s=c(t);n+=s,n+="</div>",n=e(n),a.append(n),n.fadeIn()},c=function(e){return r("halbfinale"===s.toLowerCase()?e.phases[0]:e.phases[1])},r=function(e){var a="";return _.each(e.encounters,function(e,t){a+=l(e)}),a},l=function(e){var a="",t={teams:e.teams,bestOf:e.bestOf};return a+='<div class="hsc-knockout-game">',a+=i(t),a+='<table class="hsc-knockout-list">',a+=u(e.games),a+="</table>",a+="</div>"},u=function(e){var a="";return _.each(e,function(e,t){a+=d(e)}),a};return{init:function(e){var a=new HockeyDataService;t=e.data("division"),s=e.data("type"),a.getKnockout(t).then(function(a){o(e,a.data)},function(e){console.log("error",e)})}}}e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-hsc-knockout").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){function a(){var a=e("#et-main-area"),n=e(".mobile_menu_bar_toggle");n.on("click",function(n){n.preventDefault(),e(n.currentTarget).hasClass("opened")?(t(),a.show(),e(n.currentTarget).removeClass("opened")):(t(),a.hide(),e(n.currentTarget).addClass("opened"))})}function t(){var a=e(".logo_container");a.animate({top:"-50px"},"fast",function(){window.setTimeout(function(){a.animate({top:"0px"},"fast")},500)})}e(window).load(function(){a()})}(jQuery),function(e){"use strict";var a=function(){var a=new HockeyDataConfig,t="136",n="731",s=function(){return'<div class="no-games">Keine Spiele zur Zeit.</div>'},i=function(){return'<div class="hsc-game-schedule-list-item">  <div class="schedule">    <div class="date">{{ scheduledDate.value }}</div>    <div class="time">- {{ scheduledTime }}</div>  </div>  <div class="game">  <div class="teams">    <div class="team team-home">      <div class="teamlogo"><img src="'+a.logoBaseUrl+'/{{ homeTeamId }}.png" /></div>      <div class="teamname">{{ homeTeamLongName }}</div>    </div>    <div class="divider"></div>    <div class="team team-away">      <div class="teamlogo"><img src="'+a.logoBaseUrl+'/{{ awayTeamId }}.png" /></div>      <div class="teamname">{{ awayTeamLongName }}</div>    </div>  </div>  <div class="scores">      {{ gameStatus > 0 ? homeTeamScore : "-" }}      : {{ gameStatus > 0 ? awayTeamScore : "-" }}  </div>  </div></div>'},d=function(a,t){var n=e('<div class="hsc-game-schedule-list"></div>');a.append(n),o(t.rows,n)},o=function(a,t){var d=_.template(i()),o="",c=1;return 0===a.length?(d=e(s()),t.append(d),d.hide().delay(c*key).fadeIn(),!0):(_.each(a,function(a,s){(a.homeTeamId===n||a.awayTeamId===n)&&("00:00"===a.scheduledTime&&(a.scheduledTime="k.A."),o=e(d(a)),t.append(o),o.hide().delay(c*s).fadeIn())}),!0)};return{init:function(e){var a=new HockeyDataService;t=e.data("division"),n=e.data("team"),a.getSchedule(t).then(function(a){d(e,a.data)},function(e){console.log("error",e)})}}};e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-schedule").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){"use strict";var a=function(){var a=new HockeyDataConfig,t="136",n="731",s="last",i=function(){return'<div class="no-games">Keine Spiele zur Zeit.</div>'},d=function(){var e="last-game-widget";return"next"===s&&(e="next-game-widget"),'<div class="hsc-game-schedule-widget '+e+'"><div class="schedule-widget-holder">  <div class="image image-home-team">    <img src="'+a.logoBaseUrl+'/{{ homeTeamId }}.png" />  </div>  <div class="meta">    <div class="date">{{ scheduledDate.value }}</div>    <div class="time">{{ scheduledTime }}</div>    <div class="scores">{{ homeTeamScore }}:{{ awayTeamScore }}</div>  </div>  <div class="image image-away-team">    <img src="'+a.logoBaseUrl+'/{{ awayTeamId }}.png" />  </div></div>  <div class="teams">    <span class="team home-team">{{ homeTeamLongName }}</span>    <span class="divider">-</span>    <span class="team away-team">{{ awayTeamLongName }}</span>  </div></div>'},o=function(a,t){var n=e('<div class="js-schedule-widget"></div>');a.append(n),c(t.rows,n)},c=function(a,t){var o="",c=_.template(d()),r=moment(),l=!1;if("last"===s){a=_.chain(a).reverse()._wrapped;var u=_.find(a,function(e){if((e.homeTeamId===n||e.awayTeamId===n)&&e.scheduledDate&&e.scheduledDate.value&&e.gameStatus>0){var a=moment(e.scheduledDate.value,"DD.MM.YYYY");if(a.isBefore(r))return e}});u&&(l=!0,"00:00"===u.scheduledTime&&(u.scheduledTime="k.A."),o+=c(u))}if("next"===s){var m=_.find(a,function(e){if((e.homeTeamId===n||e.awayTeamId===n)&&e.scheduledDate&&e.scheduledDate.value&&0===e.gameStatus){var a=moment(e.scheduledDate.value,"DD.MM.YYYY");if(a.isSameOrAfter(r,"day"))return e}});m&&(l=!0,"00:00"===m.scheduledTime&&(m.scheduledTime="k.A."),o+=c(m))}return l?(o=e(o),t.append(o),o.hide().delay("slow").fadeIn(),!0):(c=e(i()),t.append(c),c.hide().delay("slow").fadeIn(),!0)};return{init:function(e){var a=new HockeyDataService;t=e.data("division"),n=e.data("team"),s=e.data("type");a.getSchedule(t).then(function(a){o(e,a.data)},function(e){console.log("error",e)})}}};e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-schedule-single").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){"use strict";function a(){var a=new HockeyDataConfig,t="136",n=function(){return'<tr class="hsc-standings-header"><td class="rank">#</td><td class="image"></td><td class="team">Team</td><td class="info td-gp">Sp</td><td class="info td-w">S</td><td class="info td-l">N</td><td class="info td-otw">OTS</td><td class="info td-otl">OTN</td><td class="info td-goals">Tore</td><td class="info td-gd">TD</td><td class="info td-pts">PKT</td></tr>'},s=function(){return'<tr class="hsc-standings-row"><td class="rank">{{ tableRank }}</td><td class="image"><img src="'+a.logoBaseUrl+'/{{ id }}.png" /></td><td class="team">{{ teamLongname }}</td><td class="info td-gp">{{ gamesPlayed }}</td><td class="info td-w">{{ gamesWon }}</td><td class="info td-l">{{ gamesLost }}</td><td class="info td-otw">{{ gamesWonInOt }}</td><td class="info td-otl">{{ gamesLostInOt }}</td><td class="info td-goals">{{ goalsFor }}:{{ goalsAgainst }}</td><td class="info td-gd">{{ goalDifference }}</td><td class="info td-pts">{{ points }}</td></tr>'},i=function(a,t){var s='<table class="hsc-table hsc-standings">',i=d(t.rows);s+=n(),s+=i,s+="</table>",s=e(s),a.append(s),s.fadeIn()},d=function(e){var a="",t=_.template(s());return _.each(e,function(e,n){a+=t(e)}),a};return{init:function(e){var a=new HockeyDataService;t=e.data("division"),a.getStandings(t).then(function(a){i(e,a.data)},function(e){console.log("error",e)})}}}e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-standings").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){window.HockeyDataService=function(){"use strict";var a=new HockeyDataConfig,t=a.hockeyDataApiUrl,n="/Schedule",s="/Standings",i="/KnockoutStage",d={apiKey:a.hockeyDataApiKey,divisionId:"136",league:a.league,sport:a.sport,referer:a.referer};return{getSchedule:function(a){var s=e.Deferred();d.divisionId=a;var i=e.param(d),o=t+n+"?"+i,c=e.ajax({url:o,dataType:"jsonp",async:!1});return c.success(function(e){return s.resolve(e)}),c.error(function(e){return s.reject({data:{rows:[]}})}),s.promise()},getStandings:function(a){d.divisionId=a;var n=e.param(d),i=t+s+"?"+n;return e.ajax({url:i,dataType:"jsonp"})},getKnockout:function(a){d.divisionId=a;var n=e.param(d),s=t+i+"?"+n;return e.ajax({url:s,dataType:"jsonp"})}}}}(jQuery);
//# sourceMappingURL=data:application/json;base64,
