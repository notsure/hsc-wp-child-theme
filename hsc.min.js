!function(e){"use strict";var a=function(){var e="http://api2.hockeydata.net/img/icehockey/ebel/team-logos/",a="136",t="731",i=function(){return'<div class="hsc-game-schedule-list-header">  <div class="date">Datum</div>  <div class="time"></div>  <div class="team">Begegnung</div>  <div class="scores">Ergebnis</div></div>'},s=function(){return'<div class="hsc-game-schedule-list-item">  <div class="date">{{ scheduledDate.value }}</div>  <div class="time">{{ scheduledTime }}</div>  <div class="teams">    <div class="team team-home mb-sm">      <div class="teamlogo"><img src="'+e+a+'/{{ homeTeamId }}.png" /></div>      <div class="teamname">{{ homeTeamLongName }}</div>    </div>    <div class="team team-away">      <div class="teamlogo"><img src="'+e+a+'/{{ awayTeamId }}.png" /></div>      <div class="teamname">{{ awayTeamLongName }}</div>    </div>  </div>  <div class="scores">      {{ homeTeamScore === null ? "-": homeTeamScore }}      : {{ awayTeamScore === null ? "-": awayTeamScore }}  </div></div>'},n=function(e,a){var t='<div class="hsc-game-schedule-list">',s=d(a.rows);t+=i(),t+=s,t+="</div>",e.html(t)},d=function(e){var a="",i=_.template(s());return _.each(e,function(e,s){(e.homeTeamId===t||e.awayTeamId===t)&&(a+=i(e))}),a};return{init:function(e){var i=new HockeyDataService;a=e.data("division"),t=e.data("team"),i.getSchedule(a).then(function(a){n(e,a.data)},function(e){console.log("error",e)})}}};e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-schedule").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){"use strict";var a=function(){var e="http://api2.hockeydata.net/img/icehockey/ebel/team-logos/",a="136",t="731",i="last",s=function(){var t="last-game-widget";return"next"===i&&(t="next-game-widget"),'<div class="hsc-game-schedule-widget '+t+'"><div class="schedule-widget-holder">  <div class="image image-home-team">    <img src="'+e+a+'/{{ homeTeamId }}.png" />  </div>  <div class="meta">    <div class="date">{{ scheduledDate.value }}</div>    <div class="time">{{ scheduledTime }}</div>    <div class="scores">      <div class="score score-home-team">{{ homeTeamScore }}</div>      <div class="divider">:</div>      <div class="score score-away-team">{{ awayTeamScore }}</div>    </div>  </div>  <div class="image image-away-team">    <img src="'+e+a+'/{{ awayTeamId }}.png" />  </div></div>  <div class="teams">    <span class="team home-team">{{ homeTeamLongName }}</span>    <span class="divider">Vs</span>    <span class="team away-team">{{ awayTeamLongName }}</span>  </div></div>'},n=function(e,a){var t="<div>",i=d(a.rows);t+=i,t+="</div>",e.html(t)},d=function(e){var a="",n=_.template(s()),d=moment();if("last"===i){e=_.chain(e).reverse()._wrapped;var c=_.find(e,function(e){if((e.homeTeamId===t||e.awayTeamId===t)&&e.scheduledDate&&e.scheduledDate.value&&null!==e.homeTeamScore&&null!==e.awayTeamScore){var a=moment(e.scheduledDate.value,"DD.MM.YYYY");if(a.isBefore(d))return e}});c&&(a+=n(c))}if("next"===i){var o=_.find(e,function(e){if((e.homeTeamId===t||e.awayTeamId===t)&&e.scheduledDate&&e.scheduledDate.value&&null===e.homeTeamScore&&null===e.awayTeamScore){var a=moment(e.scheduledDate.value,"DD.MM.YYYY");if(a.isSameOrAfter(d))return e}});o&&(a+=n(o))}return a};return{init:function(e){var s=new HockeyDataService;a=e.data("division"),t=e.data("team"),i=e.data("type");s.getSchedule(a).then(function(a){n(e,a.data)},function(e){console.log("error",e)})}}};e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-schedule-single").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){"use strict";function a(){var e="http://api2.hockeydata.net/img/icehockey/ebel/team-logos/",a="136",t=function(){return'<tr><th class="rank">#</th><th class="team" colspan="2">Team</th><th class="info">GP</th><th class="info">W</th><th class="info">L</th><th class="info">P</th></tr>'},i=function(){return'<tr class="hsc-standings-row"><td class="rank">{{ tableRank }}</td><td class="image"><img src="'+e+a+'/{{ id }}.png" /></td><td class="team">{{ teamLongname }}</td><td class="info">{{ gamesPlayed }}</td><td class="info">{{ gamesWon }}</td><td class="info">{{ gamesLost }}</td><td class="info">{{ points }}</td></tr>'},s=function(e,a){var i='<table class="table hsc-standings">',s=n(a.rows);i+=t(),i+=s,i+="</table>",e.html(i)},n=function(e){var a="",t=_.template(i());return _.each(e,function(e,i){a+=t(e)}),a};return{init:function(e){var t=new HockeyDataService;a=e.data("division"),t.getStandings(a).then(function(a){s(e,a.data)},function(e){console.log("error",e)})}}}e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-standings").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){window.HockeyDataService=function(){"use strict";var a="http://api.hockeydata.net/data/ebel",t="/Schedule",i="/Standings",s={apiKey:"e52b5722cbc89c3e51ee0cd6e2485a81",divisionId:"136",league:"ebel",sport:"icehockey",referer:"www.h-sc.at"};return{getSchedule:function(i){var n=e.Deferred();s.divisionId=i;var d=e.param(s),c=a+t+"?"+d,o=e.ajax({url:c,dataType:"jsonp",async:!1});return o.success(function(e){return e.data.rows.push({id:"d9e6d977-e3bd-4d81-9788-722cdb9f669b",divisionId:136,divisionName:"VEHL 1",scheduledDate:{sortValue:14451804e5,value:"18.10.2019",shortValue:"18.10.",longValue:"18. Oktober 2015"},scheduledTime:"17:00",awayTeamId:728,awayTeamLongName:"EHC Megafit Ice Tigers Dornbirn",awayTeamShortName:"ITD",awayTeamFlavourname:"EHC Megafit Ice Tigers Dornbirn",homeTeamId:731,homeTeamLongName:"SC Hohenems 2",homeTeamShortName:"HO2",homeTeamFlavourname:"SC Hohenems 2",homeTeamScore:null,awayTeamScore:null}),n.resolve(e)}),o.error(function(e){return n.reject({data:{rows:[]}})}),n.promise()},getStandings:function(t){s.divisionId=t;var n=e.param(s),d=a+i+"?"+n;return e.ajax({url:d,dataType:"jsonp"})}}}}(jQuery);
//# sourceMappingURL=data:application/json;base64,
