!function(e){window.HockeyDataService=function(){"use strict";var a="http://api.hockeydata.net/data/ebel",t="/Schedule",n="/Standings",s="/KnockoutStage",i={apiKey:"e52b5722cbc89c3e51ee0cd6e2485a81",divisionId:"136",league:"ebel",sport:"icehockey",referer:"www.h-sc.at"};return{getSchedule:function(n){var s=e.Deferred();i.divisionId=n;var c=e.param(i),d=a+t+"?"+c,o=e.ajax({url:d,dataType:"jsonp",async:!1});return o.success(function(e){return e.data.rows.push({id:"d9e6d977-e3bd-4d81-9788-722cdb9f669b",divisionId:136,divisionName:"VEHL 1",scheduledDate:{sortValue:14451804e5,value:"18.10.2019",shortValue:"18.10.",longValue:"18. Oktober 2015"},scheduledTime:"17:00",awayTeamId:728,awayTeamLongName:"EHC Megafit Ice Tigers Dornbirn",awayTeamShortName:"ITD",awayTeamFlavourname:"EHC Megafit Ice Tigers Dornbirn",homeTeamId:731,homeTeamLongName:"SC Hohenems 2",homeTeamShortName:"HO2",homeTeamFlavourname:"SC Hohenems 2",homeTeamScore:null,awayTeamScore:null}),s.resolve(e)}),o.error(function(e){return s.reject({data:{rows:[]}})}),s.promise()},getStandings:function(t){i.divisionId=t;var s=e.param(i),c=a+n+"?"+s;return e.ajax({url:c,dataType:"jsonp"})},getKnockout:function(t){i.divisionId=t;var n=e.param(i),c=a+s+"?"+n;return e.ajax({url:c,dataType:"jsonp"})}}}}(jQuery),function(e){"use strict";var a=jQuery.fn.addClass;jQuery.fn.addClass=function(){var e=a.apply(this,arguments);return jQuery("#main-header").removeClass("et-fixed-header"),e},e("#main-header").removeClass("et-fixed-header")}(jQuery),function(e){"use strict";function a(){var e="/wp-content/themes/hsc-theme/images/teams",a="136",t="halbfinale",n=function(a){var t='<table class="hsc-knockout-overview"><tr>  <td class="image">    <img src="'+e+'/{{ teams[0].id }}.png" />  </td>  <td class="meta">    <span class="score">{{ teams[0].gamesWon }} : {{ teams[1].gamesWon }}</span><br/>    <span class="bestof">Best of: {{ bestOf }}</span>  </td>  <td class="image">    <img src="'+e+'/{{ teams[1].id }}.png" />  </td></tr></table>';return(t=_.template(t))(a)},s=function(e){var a='<tr>  <td class="date" colspan="2">    {{ scheduledDate.value }} - {{ scheduledTime }}  </td></tr><tr>  <td class="team">{{ homeTeamLongName }} <br/> {{ awayTeamLongName }}</td>  <td class="score">{{ homeTeamScore }} : {{ awayTeamScore }}</td></tr>';return(a=_.template(a))(e)},i=function(e,a){var t='<div class="hsc-knockout">',n=c(a);t+=n,t+="</div>",e.html(t)},c=function(e){return d("halbfinale"===t.toLowerCase()?e.phases[0]:e.phases[1])},d=function(e){var a="";return _.each(e.encounters,function(e,t){a+=o(e)}),a},o=function(e){var a="",t={teams:e.teams,bestOf:e.bestOf};return a+='<div class="hsc-knockout-game">',a+=n(t),a+='<table class="hsc-knockout-list">',a+=r(e.games),a+="</table>",a+="</div>"},r=function(e){var a="";return _.each(e,function(e,t){a+=s(e)}),a};return{init:function(e){var n=new HockeyDataService;a=e.data("division"),t=e.data("type"),n.getKnockout(a).then(function(a){i(e,a.data)},function(e){console.log("error",e)})}}}e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-hsc-knockout").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){function a(){var a=e("#et-main-area"),t=e(".mobile_menu_bar_toggle");t.on("click",function(t){e(t.currentTarget).hasClass("opened")?(a.show(),e(t.currentTarget).removeClass("opened")):(a.hide(),e(t.currentTarget).addClass("opened"))})}e(window).load(function(){a()})}(jQuery),function(e){"use strict";var a=function(){var e="/wp-content/themes/hsc-theme/images/teams",a="136",t="731",n=function(){return'<div class="hsc-game-schedule-list-item">  <div class="schedule">    <div class="date">{{ scheduledDate.value }}</div>    <div class="time">- {{ scheduledTime }}</div>  </div>  <div class="game">  <div class="teams">    <div class="team team-home">      <div class="teamlogo"><img src="'+e+'/{{ homeTeamId }}.png" /></div>      <div class="teamname">{{ homeTeamLongName }}</div>    </div>    <div class="team team-away">      <div class="teamlogo"><img src="'+e+'/{{ awayTeamId }}.png" /></div>      <div class="teamname">{{ awayTeamLongName }}</div>    </div>  </div>  <div class="scores">      {{ homeTeamScore === null ? "-": homeTeamScore }}      : {{ awayTeamScore === null ? "-": awayTeamScore }}  </div>  </div></div>'},s=function(e,a){var t='<div class="hsc-game-schedule-list">',n=i(a.rows);t+=n,t+="</div>",e.html(t)},i=function(e){var a="",s=_.template(n());return _.each(e,function(e,n){(e.homeTeamId===t||e.awayTeamId===t)&&(a+=s(e))}),a};return{init:function(e){var n=new HockeyDataService;a=e.data("division"),t=e.data("team"),n.getSchedule(a).then(function(a){s(e,a.data)},function(e){console.log("error",e)})}}};e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-schedule").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){"use strict";var a=function(){var e="/wp-content/themes/hsc-theme/images/teams",a="136",t="731",n="last",s=function(){var a="last-game-widget";return"next"===n&&(a="next-game-widget"),'<div class="hsc-game-schedule-widget '+a+'"><div class="schedule-widget-holder">  <div class="image image-home-team">    <img src="'+e+'/{{ homeTeamId }}.png" />  </div>  <div class="meta">    <div class="date">{{ scheduledDate.value }}</div>    <div class="time">{{ scheduledTime }}</div>    <div class="scores">      <div class="score score-home-team">{{ homeTeamScore }}</div>      <div class="divider">:</div>      <div class="score score-away-team">{{ awayTeamScore }}</div>    </div>  </div>  <div class="image image-away-team">    <img src="'+e+'/{{ awayTeamId }}.png" />  </div></div>  <div class="teams">    <span class="team home-team">{{ homeTeamLongName }}</span>    <span class="divider">-</span>    <span class="team away-team">{{ awayTeamLongName }}</span>  </div></div>'},i=function(e,a){var t="<div>",n=c(a.rows);t+=n,t+="</div>",e.html(t)},c=function(e){var a="",i=_.template(s()),c=moment();if("last"===n){e=_.chain(e).reverse()._wrapped;var d=_.find(e,function(e){if((e.homeTeamId===t||e.awayTeamId===t)&&e.scheduledDate&&e.scheduledDate.value&&null!==e.homeTeamScore&&null!==e.awayTeamScore){var a=moment(e.scheduledDate.value,"DD.MM.YYYY");if(a.isBefore(c))return e}});d&&(a+=i(d))}if("next"===n){var o=_.find(e,function(e){if((e.homeTeamId===t||e.awayTeamId===t)&&e.scheduledDate&&e.scheduledDate.value&&null===e.homeTeamScore&&null===e.awayTeamScore){var a=moment(e.scheduledDate.value,"DD.MM.YYYY");if(a.isSameOrAfter(c))return e}});o&&(a+=i(o))}return a};return{init:function(e){var s=new HockeyDataService;a=e.data("division"),t=e.data("team"),n=e.data("type");s.getSchedule(a).then(function(a){i(e,a.data)},function(e){console.log("error",e)})}}};e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-schedule-single").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){"use strict";function a(){var e="/wp-content/themes/hsc-theme/images/teams",a="136",t=function(){return'<tr class="hsc-standings-header"><td class="rank">#</td><td class="image"></td><td class="team">Team</td><td class="info">GP</td><td class="info">W</td><td class="info">L</td><td class="info">P</td></tr>'},n=function(){return'<tr class="hsc-standings-row"><td class="rank">{{ tableRank }}</td><td class="image"><img src="'+e+'/{{ id }}.png" /></td><td class="team">{{ teamLongname }}</td><td class="info">{{ gamesPlayed }}</td><td class="info">{{ gamesWon }}</td><td class="info">{{ gamesLost }}</td><td class="info">{{ points }}</td></tr>'},s=function(e,a){var n='<table class="hsc-table hsc-standings">',s=i(a.rows);n+=t(),n+=s,n+="</table>",e.html(n)},i=function(e){var a="",t=_.template(n());return _.each(e,function(e,n){a+=t(e)}),a};return{init:function(e){var t=new HockeyDataService;a=e.data("division"),t.getStandings(a).then(function(a){s(e,a.data)},function(e){console.log("error",e)})}}}e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-standings").each(function(){var t=new a;t.init(e(this))})})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
