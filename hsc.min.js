!function(e){"use strict";var a=jQuery.fn.addClass;jQuery.fn.addClass=function(){var e=a.apply(this,arguments);return jQuery("#main-header").removeClass("et-fixed-header"),e},e("#main-header").removeClass("et-fixed-header")}(jQuery),function(e){"use strict";function a(){var a="/wp-content/themes/hsc-theme/images/teams",t="136",n="halbfinale",s=function(e){var t='<table class="hsc-knockout-overview"><tr>  <td class="image">    <img src="'+a+'/{{ teams[0].id }}.png" />  </td>  <td class="meta">    <span class="score">{{ teams[0].gamesWon }} : {{ teams[1].gamesWon }}</span><br/>    <span class="bestof">Best of: {{ bestOf }}</span>  </td>  <td class="image">    <img src="'+a+'/{{ teams[1].id }}.png" />  </td></tr></table>';return(t=_.template(t))(e)},i=function(e){var a='<tr>  <td class="date" colspan="2">    {{ scheduledDate.value }} - {{ scheduledTime }}  </td></tr><tr>  <td class="team">{{ homeTeamLongName }} <br/> {{ awayTeamLongName }}</td>  <td class="score">{{ homeTeamScore }} : {{ awayTeamScore }}</td></tr>';return(a=_.template(a))(e)},d=function(a,t){var n='<div class="hsc-knockout">',s=c(t);n+=s,n+="</div>",n=e(n),a.append(n),n.fadeIn()},c=function(e){return o("halbfinale"===n.toLowerCase()?e.phases[0]:e.phases[1])},o=function(e){var a="";return _.each(e.encounters,function(e,t){a+=r(e)}),a},r=function(e){var a="",t={teams:e.teams,bestOf:e.bestOf};return a+='<div class="hsc-knockout-game">',a+=s(t),a+='<table class="hsc-knockout-list">',a+=l(e.games),a+="</table>",a+="</div>"},l=function(e){var a="";return _.each(e,function(e,t){a+=i(e)}),a};return{init:function(e){var a=new HockeyDataService;t=e.data("division"),n=e.data("type"),a.getKnockout(t).then(function(a){d(e,a.data)},function(e){console.log("error",e)})}}}e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-hsc-knockout").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){function a(){var a=e("#et-main-area"),t=e(".mobile_menu_bar_toggle");t.on("click",function(t){e(t.currentTarget).hasClass("opened")?(a.show(),e(t.currentTarget).removeClass("opened")):(a.hide(),e(t.currentTarget).addClass("opened"))})}e(window).load(function(){a()})}(jQuery),function(e){"use strict";var a=function(){var a="/wp-content/themes/hsc-theme/images/teams",t="136",n="731",s=function(){return'<div class="no-games">Keine Spiele zur Zeit.</div>'},i=function(){return'<div class="hsc-game-schedule-list-item">  <div class="schedule">    <div class="date">{{ scheduledDate.value }}</div>    <div class="time">- {{ scheduledTime }}</div>  </div>  <div class="game">  <div class="teams">    <div class="team team-home">      <div class="teamlogo"><img src="'+a+'/{{ homeTeamId }}.png" /></div>      <div class="teamname">{{ homeTeamLongName }}</div>    </div>    <div class="divider"></div>    <div class="team team-away">      <div class="teamlogo"><img src="'+a+'/{{ awayTeamId }}.png" /></div>      <div class="teamname">{{ awayTeamLongName }}</div>    </div>  </div>  <div class="scores">      {{ homeTeamScore === null ? "-": homeTeamScore }}      : {{ awayTeamScore === null ? "-": awayTeamScore }}  </div>  </div></div>'},d=function(a,t){var n=e('<div class="hsc-game-schedule-list"></div>');a.append(n),c(t.rows,n)},c=function(a,t){var d=_.template(i()),c="",o=1;return 0===a.length?(d=e(s()),t.append(d),d.hide().delay(o*key).fadeIn(),!0):(_.each(a,function(a,s){(a.homeTeamId===n||a.awayTeamId===n)&&(c=e(d(a)),t.append(c),c.hide().delay(o*s).fadeIn())}),!0)};return{init:function(e){var a=new HockeyDataService;t=e.data("division"),n=e.data("team"),a.getSchedule(t).then(function(a){d(e,a.data)},function(e){console.log("error",e)})}}};e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-schedule").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){"use strict";var a=function(){var a="/wp-content/themes/hsc-theme/images/teams",t="136",n="731",s="last",i=function(){return'<div class="no-games">Keine Spiele zur Zeit.</div>'},d=function(){var e="last-game-widget";return"next"===s&&(e="next-game-widget"),'<div class="hsc-game-schedule-widget '+e+'"><div class="schedule-widget-holder">  <div class="image image-home-team">    <img src="'+a+'/{{ homeTeamId }}.png" />  </div>  <div class="meta">    <div class="date">{{ scheduledDate.value }}</div>    <div class="time">{{ scheduledTime }}</div>    <div class="scores">{{ homeTeamScore }}:{{ awayTeamScore }}</div>  </div>  <div class="image image-away-team">    <img src="'+a+'/{{ awayTeamId }}.png" />  </div></div>  <div class="teams">    <span class="team home-team">{{ homeTeamLongName }}</span>    <span class="divider">-</span>    <span class="team away-team">{{ awayTeamLongName }}</span>  </div></div>'},c=function(a,t){var n=e('<div class="js-schedule-widget"></div>');a.append(n),o(t.rows,n)},o=function(a,t){var c="",o=_.template(d()),r=moment(),l=!1;if("last"===s){a=_.chain(a).reverse()._wrapped;var m=_.find(a,function(e){if((e.homeTeamId===n||e.awayTeamId===n)&&e.scheduledDate&&e.scheduledDate.value&&null!==e.homeTeamScore&&null!==e.awayTeamScore){var a=moment(e.scheduledDate.value,"DD.MM.YYYY");if(a.isBefore(r))return e}});m&&(l=!0,c+=o(m))}if("next"===s){var u=_.find(a,function(e){if((e.homeTeamId===n||e.awayTeamId===n)&&e.scheduledDate&&e.scheduledDate.value&&null===e.homeTeamScore&&null===e.awayTeamScore){var a=moment(e.scheduledDate.value,"DD.MM.YYYY");if(a.isSameOrAfter(r))return e}});u&&(l=!0,c+=o(u))}return l?(c=e(c),t.append(c),c.hide().delay("slow").fadeIn(),!0):(o=e(i()),t.append(o),o.hide().delay("slow").fadeIn(),!0)};return{init:function(e){var a=new HockeyDataService;t=e.data("division"),n=e.data("team"),s=e.data("type");a.getSchedule(t).then(function(a){c(e,a.data)},function(e){console.log("error",e)})}}};e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-schedule-single").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){"use strict";function a(){var a="/wp-content/themes/hsc-theme/images/teams",t="136",n=function(){return'<tr class="hsc-standings-header"><td class="rank">#</td><td class="image"></td><td class="team">Team</td><td class="info td-gp">Sp</td><td class="info td-w">S</td><td class="info td-l">N</td><td class="info td-otw">OTS</td><td class="info td-otl">OTN</td><td class="info td-goals">Tore</td><td class="info td-gd">TD</td><td class="info td-pts">PKT</td></tr>'},s=function(){return'<tr class="hsc-standings-row"><td class="rank">{{ tableRank }}</td><td class="image"><img src="'+a+'/{{ id }}.png" /></td><td class="team">{{ teamLongname }}</td><td class="info td-gp">{{ gamesPlayed }}</td><td class="info td-w">{{ gamesWon }}</td><td class="info td-l">{{ gamesLost }}</td><td class="info td-otw">{{ gamesWonInOt }}</td><td class="info td-otl">{{ gamesLostInOt }}</td><td class="info td-goals">{{ goalsFor }}:{{ goalsAgainst }}</td><td class="info td-gd">{{ goalDifference }}</td><td class="info td-pts">{{ points }}</td></tr>'},i=function(a,t){var s='<table class="hsc-table hsc-standings">',i=d(t.rows);s+=n(),s+=i,s+="</table>",s=e(s),a.append(s),s.fadeIn()},d=function(e){var a="",t=_.template(s());return _.each(e,function(e,n){a+=t(e)}),a};return{init:function(e){var a=new HockeyDataService;t=e.data("division"),a.getStandings(t).then(function(a){i(e,a.data)},function(e){console.log("error",e)})}}}e(document).ready(function(){_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e(".js-widget-standings").each(function(){var t=new a;t.init(e(this))})})}(jQuery),function(e){window.HockeyDataService=function(){"use strict";var a="http://api.hockeydata.net/data/ebel",t="/Schedule",n="/Standings",s="/KnockoutStage",i={apiKey:"e52b5722cbc89c3e51ee0cd6e2485a81",divisionId:"136",league:"ebel",sport:"icehockey",referer:"www.h-sc.at"};return{getSchedule:function(n){var s=e.Deferred();i.divisionId=n;var d=e.param(i),c=a+t+"?"+d,o=e.ajax({url:c,dataType:"jsonp",async:!1});return o.success(function(e){return s.resolve(e)}),o.error(function(e){return s.reject({data:{rows:[]}})}),s.promise()},getStandings:function(t){i.divisionId=t;var s=e.param(i),d=a+n+"?"+s;return e.ajax({url:d,dataType:"jsonp"})},getKnockout:function(t){i.divisionId=t;var n=e.param(i),d=a+s+"?"+n;return e.ajax({url:d,dataType:"jsonp"})}}}}(jQuery);
//# sourceMappingURL=data:application/json;base64,
